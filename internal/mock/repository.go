// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// StoreCounter provides a mock function with given fields: mtype, mname, mvalue
func (_m *Repository) StoreCounter(mtype string, mname string, mvalue int64) bool {
	ret := _m.Called(mtype, mname, mvalue)

	if len(ret) == 0 {
		panic("no return value specified for StoreCounter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int64) bool); ok {
		r0 = rf(mtype, mname, mvalue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StoreGauge provides a mock function with given fields: mtype, mname, mvalue
func (_m *Repository) StoreGauge(mtype string, mname string, mvalue float64) bool {
	ret := _m.Called(mtype, mname, mvalue)

	if len(ret) == 0 {
		panic("no return value specified for StoreGauge")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, float64) bool); ok {
		r0 = rf(mtype, mname, mvalue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
