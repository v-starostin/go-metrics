package handler

import (
	"github.com/go-chi/chi/v5"
	"github.com/rs/zerolog"
	"github.com/v-starostin/go-metrics/internal/service"
	"net/http"
	"strconv"
)

type GetMetric struct {
	logger  *zerolog.Logger
	service Service
}

func NewGetMetric(l *zerolog.Logger, srv Service) *GetMetric {
	return &GetMetric{
		logger:  l,
		service: srv,
	}
}

func (h *GetMetric) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	mtype := chi.URLParam(r, "type")
	mname := chi.URLParam(r, "name")
	//mvalue := chi.URLParam(r, "value")

	metric, err := h.service.GetMetric(mtype, mname)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		http.Error(w, "metric not found", http.StatusNotFound)
		return
	}
	h.logger.Info().Msgf("Recieved metric from storage: %+v", metric)

	switch mtype {
	case service.TypeGauge:
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(strconv.FormatFloat(*metric.Value, 'f', -1, 64)))
	case service.TypeCounter:
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(strconv.FormatInt(*metric.Delta, 10)))
	}

}
