// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GoMetrics_PostMetrics_FullMethodName = "/pb.GoMetrics/PostMetrics"
)

// GoMetricsClient is the client API for GoMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoMetricsClient interface {
	PostMetrics(ctx context.Context, in *PostMetricsRequest, opts ...grpc.CallOption) (*PostMetricsResponse, error)
}

type goMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoMetricsClient(cc grpc.ClientConnInterface) GoMetricsClient {
	return &goMetricsClient{cc}
}

func (c *goMetricsClient) PostMetrics(ctx context.Context, in *PostMetricsRequest, opts ...grpc.CallOption) (*PostMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostMetricsResponse)
	err := c.cc.Invoke(ctx, GoMetrics_PostMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoMetricsServer is the server API for GoMetrics service.
// All implementations must embed UnimplementedGoMetricsServer
// for forward compatibility
type GoMetricsServer interface {
	PostMetrics(context.Context, *PostMetricsRequest) (*PostMetricsResponse, error)
	mustEmbedUnimplementedGoMetricsServer()
}

// UnimplementedGoMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedGoMetricsServer struct {
}

func (UnimplementedGoMetricsServer) PostMetrics(context.Context, *PostMetricsRequest) (*PostMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMetrics not implemented")
}
func (UnimplementedGoMetricsServer) mustEmbedUnimplementedGoMetricsServer() {}

// UnsafeGoMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoMetricsServer will
// result in compilation errors.
type UnsafeGoMetricsServer interface {
	mustEmbedUnimplementedGoMetricsServer()
}

func RegisterGoMetricsServer(s grpc.ServiceRegistrar, srv GoMetricsServer) {
	s.RegisterService(&GoMetrics_ServiceDesc, srv)
}

func _GoMetrics_PostMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoMetricsServer).PostMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoMetrics_PostMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoMetricsServer).PostMetrics(ctx, req.(*PostMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoMetrics_ServiceDesc is the grpc.ServiceDesc for GoMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoMetrics",
	HandlerType: (*GoMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMetrics",
			Handler:    _GoMetrics_PostMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
